name: Deploy to Vercel (Direct)

# This workflow deploys the branch AS-IS to Vercel
# All required files must be committed to the repository

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - production
          - preview
        default: 'preview'

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Prevent concurrent deployments to the same branch
    concurrency:
      group: vercel-deploy-direct-${{ github.event.inputs.branch }}
      cancel-in-progress: true

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0

      - name: � Verify required files
        run: |
          echo "📦 Verifying required Vercel files..."
          # Check critical files
          if [ ! -f "vercel.json" ]; then
            echo "❌ ERROR: vercel.json not found!"; exit 1; fi
          echo "  ✓ vercel.json exists"

          if [ ! -f "backend/index.js" ]; then
            echo "❌ ERROR: backend/index.js not found!"; exit 1; fi
          echo "  ✓ backend/index.js exists"

          if [ ! -f "frontend/public/index.html" ]; then
            echo "❌ ERROR: frontend/public/index.html not found!"; exit 1; fi
          echo "  ✓ frontend/public/index.html exists"

          if [ ! -f "frontend/build-production.js" ]; then
            echo "❌ ERROR: frontend/build-production.js not found!"; exit 1; fi
          echo "  ✓ frontend/build-production.js exists"

          if [ ! -f "frontend/.env.production" ]; then
            echo "❌ ERROR: frontend/.env.production not found!"; exit 1; fi
          echo "  ✓ frontend/.env.production exists"

          if [ ! -f "frontend/public/manifest.json" ]; then
            echo "❌ ERROR: frontend/public/manifest.json not found!"; exit 1; fi
          echo "  ✓ frontend/public/manifest.json exists"

          # Check package.json scripts
          if ! grep -q '"build:production"' frontend/package.json; then
            echo "❌ ERROR: build:production script not found in frontend/package.json!"; exit 1; fi
          echo "  ✓ frontend/package.json has build:production script"

          if ! grep -q '"postinstall"' backend/package.json; then
            echo "❌ ERROR: postinstall script not found in backend/package.json!"; exit 1; fi
          echo "  ✓ backend/package.json has postinstall script"

          echo "✅ All required files present!"

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 📦 Install Vercel CLI
        run: npm install -g vercel@latest

      - name: 🔗 Link Vercel Project
        run: |
          vercel link --yes \
            --token=${{ secrets.VERCEL_TOKEN }} \
            --scope=${{ secrets.VERCEL_ORG_ID }} \
            --project=${{ secrets.VERCEL_PROJECT_ID }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: 🚀 Deploy to Vercel
        id: deploy
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "🌟 Deploying to PRODUCTION..."
            DEPLOY_URL=$(vercel deploy --prod --yes --token=${{ secrets.VERCEL_TOKEN }})
          else
            echo "🔍 Deploying to PREVIEW..."
            DEPLOY_URL=$(vercel deploy --yes --token=${{ secrets.VERCEL_TOKEN }})
          fi

          echo "deployment_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "✅ Deployment URL: $DEPLOY_URL"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: 📝 Create Deployment Summary
        run: |
          echo "## 🚀 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.event.inputs.branch }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** \`${{ github.event.inputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment URL:** ${{ steps.deploy.outputs.deployment_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow:** Direct (No file injection)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

