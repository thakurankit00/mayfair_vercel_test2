name: Deploy to Multiple Environments

on:
  workflow_dispatch:
    inputs:
      deploy_dev:
        description: 'Deploy to Dev'
        required: false
        type: boolean
        default: true
      deploy_prod:
        description: 'Deploy to Prod'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'
  BRANCH_NAME: master

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    concurrency:
      group: vercel-deploy-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Validate Deployment Selection
        run: |
          if [ "${{ inputs.deploy_dev }}" != "true" ] && [ "${{ inputs.deploy_prod }}" != "true" ]; then
            echo "Error: At least one environment must be selected"
            exit 1
          fi

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Generate Vercel Configuration
        run: |
          cat > vercel.json << 'EOF'
          {
            "version": 2,
            "builds": [
              {
                "src": "backend/index.js",
                "use": "@vercel/node",
                "config": { "maxLambdaSize": "50mb" }
              }
            ],
            "routes": [
              { "src": "/api/(.*)", "dest": "backend/index.js" },
              { "src": "/(.*)", "dest": "backend/index.js" }
            ],
            "env": {
              "NODE_ENV": "production",
              "DISABLE_ESLINT_PLUGIN": "true",
              "CI": "false"
            }
          }
          EOF

      - name: Generate Backend Entry Point
        run: |
          mkdir -p api
          cat > backend/index.js << 'EOF'
          const express = require('express');
          const cors = require('cors');
          const path = require('path');
          const fs = require('fs');

          const app = express();

          app.use(cors());
          app.use(express.json({ limit: '50mb' }));
          app.use(express.urlencoded({ extended: true, limit: '50mb' }));

          app.get('/api/health', (req, res) => {
            res.json({ status: 'OK', timestamp: new Date().toISOString() });
          });

          // Auto-mount API routes
          const routesDir = path.join(__dirname, 'src', 'routes');
          if (fs.existsSync(routesDir)) {
            fs.readdirSync(routesDir)
              .filter(f => f.endsWith('.js'))
              .forEach(file => {
                const base = file.replace(/\.js$/i, '');
                try {
                  const router = require(path.join(routesDir, file));
                  if (router && typeof router === 'function') {
                    app.use(`/api/v1/${base}`, router);
                  }
                } catch (err) {
                  console.log(`Route ${file} not available:`, err.message);
                }
              });
          }

          // Serve frontend
          const frontendPath = path.join(__dirname, '..', 'frontend', 'build');
          if (fs.existsSync(frontendPath)) {
            app.use(express.static(frontendPath));
            app.get('*', (req, res) => {
              if (!req.path.startsWith('/api')) {
                res.sendFile(path.join(frontendPath, 'index.html'));
              } else {
                res.status(404).json({ error: 'API endpoint not found' });
              }
            });
          }

          module.exports = app;
          EOF

      - name: Generate Frontend Build Configuration
        run: |
          mkdir -p frontend/public
          
          # Build script
          cat > frontend/build-production.js << 'EOF'
          #!/usr/bin/env node
          const { spawn } = require('child_process');

          const build = spawn('npm', ['run', 'build'], {
            stdio: 'inherit',
            env: {
              ...process.env,
              DISABLE_ESLINT_PLUGIN: 'true',
              CI: 'false',
              GENERATE_SOURCEMAP: 'false'
            }
          });

          build.on('close', code => process.exit(code));
          EOF

          # Environment variables
          cat > frontend/.env.production << 'EOF'
          REACT_APP_API_URL=/api/v1
          REACT_APP_SOCKET_URL=
          GENERATE_SOURCEMAP=false
          DISABLE_ESLINT_PLUGIN=true
          CI=false
          EOF

          # Manifest
          cat > frontend/public/manifest.json << 'EOF'
          {
            "short_name": "App",
            "name": "Application",
            "start_url": ".",
            "display": "standalone",
            "theme_color": "#1976d2",
            "background_color": "#ffffff"
          }
          EOF

      - name: Update Package Scripts
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          
          if [ -f "backend/package.json" ]; then
            jq '.scripts.postinstall = "cd ../frontend && npm install && npm run build:production" | 
                .scripts["vercel-build"] = "cd ../frontend && npm install && npm run build" |
                .scripts.start = "node index.js"' \
              backend/package.json > temp.json && mv temp.json backend/package.json
          fi
          
          if [ -f "frontend/package.json" ]; then
            jq '.scripts["build:production"] = "node build-production.js"' \
              frontend/package.json > temp.json && mv temp.json frontend/package.json
          fi

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Link Vercel Project
        run: |
          vercel link --yes \
            --token=${{ secrets.VERCEL_TOKEN }} \
            --scope=${{ secrets.VERCEL_ORG_ID }} \
            --project=${{ secrets.VERCEL_PROJECT_ID }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Dev
        id: dev
        if: ${{ inputs.deploy_dev == 'true' }}
        run: |
          URL=$(vercel deploy --yes --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$URL" >> $GITHUB_OUTPUT
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Prod
        id: prod
        if: ${{ inputs.deploy_prod == 'true' }}
        run: |
          URL=$(vercel deploy --prod --yes --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$URL" >> $GITHUB_OUTPUT
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      
      - name: Generate Summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.deploy_dev }}" == "true" ]; then
            echo "<details open>" >> $GITHUB_STEP_SUMMARY
            echo "<summary><strong>üîç Dev Deployment</strong></summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Target Branch** | \`${{ env.BRANCH_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **DEV URL** | [View Deployment](https://dev.mayfairmandi.com) |" >> $GITHUB_STEP_SUMMARY
            echo "| **Vercel URL** | ${{ steps.dev.outputs.url }} |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Deployment Details:**" >> $GITHUB_STEP_SUMMARY
            echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Triggered By:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Timestamp:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ inputs.deploy_prod }}" == "true" ]; then
            echo "<details open>" >> $GITHUB_STEP_SUMMARY
            echo "<summary><strong>üåü Prod Deployment</strong></summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Target Branch** | \`${{ env.BRANCH_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **PROD URL** | [View Deployment](https://prod.mayfairmandi.com) |" >> $GITHUB_STEP_SUMMARY
            echo "| **Vercel URL** | ${{ steps.prod.outputs.url }} |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Deployment Details:**" >> $GITHUB_STEP_SUMMARY
            echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Triggered By:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Timestamp:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi