name: Sync Aiven DB with Supabase

run-name: "DB Sync ‚Ä¢ Supabase ‚Üí Aiven ‚Ä¢ ${{ github.actor }}"

on:
  workflow_dispatch:
    inputs:
      confirm_sync:
        description: 'Type "CONFIRM" to proceed with database sync (this will overwrite Aiven DB)'
        required: true
        type: string

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: üîç Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_sync }}" != "CONFIRM" ]; then
            echo "‚ùå Error: Database sync not confirmed!"
            echo "Please type 'CONFIRM' in the input field to proceed with the sync."
            echo "‚ö†Ô∏è  WARNING: This operation will overwrite the Aiven database with Supabase data!"
            exit 1
          fi
          
          echo "‚úÖ Database sync confirmed - proceeding with operation"
          echo "üîÑ This will sync Supabase (source) ‚Üí Aiven (destination)"

  pre-sync-checks:
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      source-healthy: ${{ steps.health-check.outputs.source-healthy }}
      destination-healthy: ${{ steps.health-check.outputs.destination-healthy }}
      backup-created: ${{ steps.backup-aiven.outputs.backup-created }}
      supabase-backup-created: ${{ steps.backup-supabase.outputs.supabase-backup-created }}
    
    steps:
      - name: üîß Install PostgreSQL 17 client
        run: |
          echo "üì¶ Installing PostgreSQL 17 client tools..."
          
          # Remove any existing PostgreSQL packages to avoid conflicts
          sudo apt-get remove -y postgresql-client-* postgresql-* || true
          
          # Add PostgreSQL official APT repository with new method
          sudo apt-get update
          sudo apt-get install -y wget ca-certificates gnupg lsb-release
          
          # Add GPG key using new method
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo gpg --dearmor -o /usr/share/keyrings/postgresql-keyring.gpg
          
          # Add repository with signed-by
          echo "deb [signed-by=/usr/share/keyrings/postgresql-keyring.gpg] http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list
          
          # Update package list and install PostgreSQL 17 client specifically
          sudo apt-get update
          sudo apt-get install -y postgresql-client-17
          
          # Ensure PostgreSQL 17 tools are in PATH and create symlinks
          sudo ln -sf /usr/lib/postgresql/17/bin/psql /usr/local/bin/psql
          sudo ln -sf /usr/lib/postgresql/17/bin/pg_dump /usr/local/bin/pg_dump
          
          # Verify installation
          echo "‚úÖ PostgreSQL 17 client installed"
          psql --version
          pg_dump --version

      - name: üè• Health Check Both Databases
        id: health-check
        run: |
          echo "üîç Performing health checks on both databases..."
          
          # Check Supabase (Source)
          echo "üì§ Testing Supabase connection..."
          export PGPASSWORD="${{ secrets.SUPABASE_DB_PASSWORD }}"
          
          if psql -h aws-1-ap-southeast-1.pooler.supabase.com -p 6543 -U postgres.aglpkgpajcgjdlfunwyr -d postgres -c "SELECT 1;" > /dev/null 2>&1; then
            echo "‚úÖ Supabase connection: HEALTHY"
            echo "source-healthy=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Supabase connection: FAILED"
            echo "source-healthy=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check Aiven (Destination)
          echo "üì• Testing Aiven connection..."
          if psql "postgres://avnadmin:${{ secrets.AIVEN_DB_PASSWORD }}@mayfair-mailcow.k.aivencloud.com:19870/defaultdb?sslmode=require" -c "SELECT 1;" > /dev/null 2>&1; then
            echo "‚úÖ Aiven connection: HEALTHY"
            echo "destination-healthy=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Aiven connection: FAILED"
            echo "destination-healthy=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "üéâ Both databases are healthy and ready for sync!"
        env:
          PGPASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: üíæ Create Aiven Database Backup
        id: backup-aiven
        run: |
          echo "üíæ Creating safety backup of Aiven database..."
          
          # Create backups directory
          mkdir -p backups
          
          AIVEN_BACKUP_FILE="backups/aiven_backup_$(date +%Y%m%d_%H%M%S).sql"
          
          echo "üì¶ Backing up Aiven database to: $AIVEN_BACKUP_FILE"
          
          pg_dump "postgres://avnadmin:${{ secrets.AIVEN_DB_PASSWORD }}@mayfair-mailcow.k.aivencloud.com:19870/defaultdb?sslmode=require" \
            --no-owner \
            --no-acl \
            --verbose \
            --file="$AIVEN_BACKUP_FILE"
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Aiven backup created successfully!"
            echo "üìä Aiven backup size: $(du -h $AIVEN_BACKUP_FILE | cut -f1)"
            echo "backup-created=true" >> $GITHUB_OUTPUT
            echo "aiven-backup-file=$AIVEN_BACKUP_FILE" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Aiven backup creation failed!"
            echo "backup-created=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: üì¶ Create Supabase Database Backup
        id: backup-supabase
        run: |
          echo "üì¶ Creating backup of Supabase database (source)..."
          
          SUPABASE_BACKUP_FILE="backups/supabase_backup_$(date +%Y%m%d_%H%M%S).sql"
          
          echo "üì§ Backing up Supabase database to: $SUPABASE_BACKUP_FILE"
          
          # Set PGPASSWORD for source database
          export PGPASSWORD="${{ secrets.SUPABASE_DB_PASSWORD }}"
          
          pg_dump \
            --host=aws-1-ap-southeast-1.pooler.supabase.com \
            --port=6543 \
            --username=postgres.aglpkgpajcgjdlfunwyr \
            --dbname=postgres \
            --no-owner \
            --no-acl \
            --verbose \
            --file="$SUPABASE_BACKUP_FILE"
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Supabase backup created successfully!"
            echo "üìä Supabase backup size: $(du -h $SUPABASE_BACKUP_FILE | cut -f1)"
            echo "supabase-backup-created=true" >> $GITHUB_OUTPUT
            echo "supabase-backup-file=$SUPABASE_BACKUP_FILE" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Supabase backup creation failed!"
            echo "supabase-backup-created=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          PGPASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: üìä Pre-Sync Database Statistics
        run: |
          echo "üìä Gathering pre-sync statistics..."
          
          # Supabase stats
          echo "üì§ Supabase (Source) Statistics:"
          export PGPASSWORD="${{ secrets.SUPABASE_DB_PASSWORD }}"
          
          # Get basic database info first
          echo "üîç Database connection and basic info:"
          psql -h aws-1-ap-southeast-1.pooler.supabase.com -p 6543 -U postgres.aglpkgpajcgjdlfunwyr -d postgres -c "SELECT version();" || echo "Could not get version info"
          
          # Get table count from information_schema (more reliable)
          echo "üìä Table statistics:"
          psql -h aws-1-ap-southeast-1.pooler.supabase.com -p 6543 -U postgres.aglpkgpajcgjdlfunwyr -d postgres -c "
            SELECT 
              table_schema,
              table_name,
              table_type
            FROM information_schema.tables 
            WHERE table_schema NOT IN ('information_schema', 'pg_catalog', 'pg_toast')
            ORDER BY table_schema, table_name
            LIMIT 20;
          " || echo "Could not get table information"
          
          # Try to get user table stats if available
          echo "üìà User table statistics (if available):"
          psql -h aws-1-ap-southeast-1.pooler.supabase.com -p 6543 -U postgres.aglpkgpajcgjdlfunwyr -d postgres -c "
            SELECT 
              schemaname,
              relname as table_name,
              n_tup_ins as inserts,
              n_tup_upd as updates,
              n_tup_del as deletes,
              n_live_tup as live_rows
            FROM pg_stat_user_tables 
            ORDER BY n_live_tup DESC 
            LIMIT 10;
          " || echo "No user table statistics available (database might be empty)"
          
          echo ""
          echo "üì• Aiven (Destination) Statistics:"
          
          # Get basic database info first
          echo "üîç Database connection and basic info:"
          psql "postgres://avnadmin:${{ secrets.AIVEN_DB_PASSWORD }}@mayfair-mailcow.k.aivencloud.com:19870/defaultdb?sslmode=require" -c "SELECT version();" || echo "Could not get version info"
          
          # Get table count from information_schema
          echo "üìä Table statistics:"
          psql "postgres://avnadmin:${{ secrets.AIVEN_DB_PASSWORD }}@mayfair-mailcow.k.aivencloud.com:19870/defaultdb?sslmode=require" -c "
            SELECT 
              table_schema,
              table_name,
              table_type
            FROM information_schema.tables 
            WHERE table_schema NOT IN ('information_schema', 'pg_catalog', 'pg_toast')
            ORDER BY table_schema, table_name
            LIMIT 20;
          " || echo "Could not get table information"
          
          # Try to get user table stats if available
          echo "üìà User table statistics (if available):"
          psql "postgres://avnadmin:${{ secrets.AIVEN_DB_PASSWORD }}@mayfair-mailcow.k.aivencloud.com:19870/defaultdb?sslmode=require" -c "
            SELECT 
              schemaname,
              relname as table_name,
              n_tup_ins as inserts,
              n_tup_upd as updates,
              n_tup_del as deletes,
              n_live_tup as live_rows
            FROM pg_stat_user_tables 
            ORDER BY n_live_tup DESC 
            LIMIT 10;
          " || echo "No user table statistics available (database might be empty)"
        env:
          PGPASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: üì§ Upload Database Backups as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: database-backups-${{ github.run_number }}
          path: backups/
          retention-days: 7
          compression-level: 9

  sync-database:
    needs: pre-sync-checks
    runs-on: ubuntu-latest
    if: ${{ needs.pre-sync-checks.outputs.source-healthy == 'true' && needs.pre-sync-checks.outputs.destination-healthy == 'true' && needs.pre-sync-checks.outputs.backup-created == 'true' }}
    
    steps:
      - name: üîß Install PostgreSQL 17 client
        run: |
          echo "üì¶ Installing PostgreSQL 17 client tools..."
          
          # Remove any existing PostgreSQL packages to avoid conflicts
          sudo apt-get remove -y postgresql-client-* postgresql-* || true
          
          # Add PostgreSQL official APT repository with new method
          sudo apt-get update
          sudo apt-get install -y wget ca-certificates gnupg lsb-release
          
          # Add GPG key using new method
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo gpg --dearmor -o /usr/share/keyrings/postgresql-keyring.gpg
          
          # Add repository with signed-by
          echo "deb [signed-by=/usr/share/keyrings/postgresql-keyring.gpg] http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list
          
          # Update package list and install PostgreSQL 17 client specifically
          sudo apt-get update
          sudo apt-get install -y postgresql-client-17
          
          # Ensure PostgreSQL 17 tools are in PATH and create symlinks
          sudo ln -sf /usr/lib/postgresql/17/bin/psql /usr/local/bin/psql
          sudo ln -sf /usr/lib/postgresql/17/bin/pg_dump /usr/local/bin/pg_dump
          
          # Verify installation
          echo "‚úÖ PostgreSQL 17 client installed"
          psql --version
          pg_dump --version

      - name: üîÑ Safe Database Sync with Transaction Control
        id: sync-operation
        run: |
          echo "ÔøΩ Starting SpAFE database sync operation..."
          echo "ÔøΩ Sourice: Supabase (aws-1-ap-southeast-1.pooler.supabase.com)"
          echo "ÔøΩ  Destination: Aiven (mayfair-mailcow.k.aivencloud.com)"
          echo "üîÑ Mode: Safe Upsert with Transaction Control"
          echo ""
          
          # Set PGPASSWORD for source database
          export PGPASSWORD="${{ secrets.SUPABASE_DB_PASSWORD }}"
          
          # Create temporary files
          TEMP_SQL_FILE="/tmp/supabase_dump.sql"
          PROCESSED_SQL_FILE="/tmp/processed_dump.sql"
          
          echo "üì¶ Creating safe database dump..."
          pg_dump \
            --host=aws-1-ap-southeast-1.pooler.supabase.com \
            --port=6543 \
            --username=postgres.aglpkgpajcgjdlfunwyr \
            --dbname=postgres \
            --no-owner \
            --no-acl \
            --data-only \
            --column-inserts \
            --verbose \
            --file="$TEMP_SQL_FILE"
          
          if [ $? -ne 0 ]; then
            echo "‚ùå Database dump failed!"
            exit 1
          fi
          
          echo "üõ°Ô∏è Processing dump for maximum safety..."
          
          # Create a safer version with transaction control
          cat > "$PROCESSED_SQL_FILE" << 'EOF'
          -- Safe Database Sync with Transaction Control
          -- This ensures we can rollback if anything goes wrong
          
          BEGIN;
          
          -- Set session to be more forgiving with conflicts
          SET session_replication_role = replica;
          
          EOF
          
          # Add the actual data with conflict handling
          sed 's/INSERT INTO/INSERT INTO/g' "$TEMP_SQL_FILE" | \
          sed 's/;$/ ON CONFLICT DO NOTHING;/g' >> "$PROCESSED_SQL_FILE"
          
          cat >> "$PROCESSED_SQL_FILE" << 'EOF'
          
          -- Reset session
          SET session_replication_role = DEFAULT;
          
          -- If we got here, everything worked - commit the transaction
          COMMIT;
          
          -- Success message
          SELECT 'Database sync completed successfully!' as status;
          EOF
          
          echo "üì• Executing safe import with transaction control..."
          
          # Execute with transaction safety
          psql "postgres://avnadmin:${{ secrets.AIVEN_DB_PASSWORD }}@mayfair-mailcow.k.aivencloud.com:19870/defaultdb?sslmode=require" \
            --file="$PROCESSED_SQL_FILE" \
            --variable=ON_ERROR_STOP=1 \
            --echo-errors \
            --verbose
          
          IMPORT_EXIT_CODE=$?
          
          # Clean up temporary files
          rm -f "$TEMP_SQL_FILE" "$PROCESSED_SQL_FILE"
          
          if [ $IMPORT_EXIT_CODE -eq 0 ]; then
            echo "‚úÖ Safe database sync completed successfully!"
            echo "sync-status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Database sync failed - transaction was rolled back!"
            echo "üõ°Ô∏è No data was modified due to transaction safety"
            echo "sync-status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          PGPASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: üîç Post-Sync Verification
        if: steps.sync-operation.outputs.sync-status == 'success'
        run: |
          echo "üîç Verifying sync results..."
          
          # Check if Aiven database is still healthy
          echo "üè• Post-sync health check..."
          if psql "postgres://avnadmin:${{ secrets.AIVEN_DB_PASSWORD }}@mayfair-mailcow.k.aivencloud.com:19870/defaultdb?sslmode=require" -c "SELECT 1;" > /dev/null 2>&1; then
            echo "‚úÖ Aiven database: HEALTHY after sync"
          else
            echo "‚ùå Aiven database: UNHEALTHY after sync!"
            exit 1
          fi
          
          # Get post-sync statistics
          echo "üìä Post-sync statistics:"
          psql "postgres://avnadmin:${{ secrets.AIVEN_DB_PASSWORD }}@mayfair-mailcow.k.aivencloud.com:19870/defaultdb?sslmode=require" -c "
            SELECT 
              'Post-Sync Stats' as info,
              COUNT(*) as total_tables
            FROM information_schema.tables 
            WHERE table_schema = 'public';
          "
          
          echo "üéâ Sync verification completed successfully!"

      - name: üìù Create Comprehensive Sync Summary
        run: |
          echo "## üîÑ Safe Database Sync Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ÔøΩÔ∏è Snafety Measures Applied" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Pre-sync health checks** on both databases" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Full backup created** of destination database" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Transaction control** with automatic rollback on failure" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Conflict handling** with ON CONFLICT DO NOTHING" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Post-sync verification** completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ÔøΩ  Sync Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Source:** Supabase (aws-1-ap-southeast-1.pooler.supabase.com)" >> $GITHUB_STEP_SUMMARY
          echo "- **Destination:** Aiven (mayfair-mailcow.k.aivencloud.com)" >> $GITHUB_STEP_SUMMARY
          echo "- **Operation:** Safe database sync with upsert handling" >> $GITHUB_STEP_SUMMARY
          echo "- **Mode:** Insert new records, preserve existing data" >> $GITHUB_STEP_SUMMARY
          echo "- **Safety Level:** üõ°Ô∏è Maximum (with backup & transaction control)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Execution Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ‚úÖ Completed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîí Data Integrity" >> $GITHUB_STEP_SUMMARY
          echo "- **Source Database:** Unchanged (read-only operation)" >> $GITHUB_STEP_SUMMARY
          echo "- **Destination Database:** Safely updated with new data" >> $GITHUB_STEP_SUMMARY
          echo "- **Existing Data:** Preserved and protected" >> $GITHUB_STEP_SUMMARY
          echo "- **Backups Available:** Yes (both databases backed up)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Backup Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact Name:** \`database-backups-${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Contains:** Supabase backup + Aiven backup (pre-sync)" >> $GITHUB_STEP_SUMMARY
          echo "- **Retention:** 7 days" >> $GITHUB_STEP_SUMMARY
          echo "- **Download:** Available in Actions ‚Üí Artifacts section" >> $GITHUB_STEP_SUMMARY